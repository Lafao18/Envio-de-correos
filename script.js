// Inicializar EmailJS con tu Public Key (nueva sintaxis)
(function () {
  emailjs.init({
    publicKey: "3NXeGZwmm81j1vc0t"
  });
  console.log("‚úÖ EmailJS inicializado correctamente con nueva versi√≥n");
})();

// Funci√≥n para mostrar mensajes
function mostrarMensaje(texto, tipo) {
  const mensaje = document.getElementById("mensaje");
  mensaje.textContent = texto;
  mensaje.className = `mensaje ${tipo}`;
  mensaje.style.display = "block";
  
  // Ocultar el mensaje despu√©s de 6 segundos
  setTimeout(() => {
    mensaje.style.display = "none";
  }, 6000);
}

// Funci√≥n para validar formato de email
function validateEmail(email) {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}

// Funci√≥n principal para enviar email
function enviarEmail(emailUsuario) {
  // Par√°metros m√°s simples para evitar problemas
  const templateParams = {
    to_email: emailUsuario
  };
  
  console.log("üöÄ Enviando email...");
  console.log("üìß Email destinatario:", emailUsuario);
  console.log("üîß Service ID: service_4khtq3u");
  console.log("üìÑ Template ID: template_34gxftq");
  console.log("üìã Par√°metros:", templateParams);
  console.log("üîë Public Key configurada: 3NXeGZwmm81j1vc0t");

      // Enviar email con m√©todo alternativo m√°s confiable
    emailjs.sendForm("service_4khtq3u", "template_34gxftq", {
      to_email: emailUsuario,
      from_name: "Mi P√°gina de Noticias"
    })
}

// Manejar el evento de env√≠o del formulario
document.addEventListener("DOMContentLoaded", function() {
  const form = document.getElementById("form-suscripcion");
  const inputCorreo = document.getElementById("correo");
  const btnSuscribir = document.getElementById("btn-suscribir");

  if (!form || !inputCorreo || !btnSuscribir) {
    console.error("‚ùå Error: No se encontraron todos los elementos del formulario");
    return;
  }

  form.addEventListener("submit", function (e) {
    e.preventDefault();

    const emailUsuario = inputCorreo.value.trim().toLowerCase();

    // Validaciones
    if (!emailUsuario) {
      mostrarMensaje("‚ö†Ô∏è Por favor ingresa tu correo electr√≥nico", "error");
      inputCorreo.focus();
      return;
    }
    
    if (!validateEmail(emailUsuario)) {
      mostrarMensaje("‚ùå Por favor ingresa un correo v√°lido (ejemplo: usuario@gmail.com)", "error");
      inputCorreo.focus();
      return;
    }

    // Cambiar estado del bot√≥n
    btnSuscribir.disabled = true;
    btnSuscribir.textContent = "Enviando...";

    // Enviar email
    console.log("üîÑ Intentando env√≠o con m√©todo directo...");
    
    emailjs.send("service_4khtq3u", "template_34gxftq", {
      to_email: emailUsuario,
      from_name: "Mi P√°gina de Noticias"
    })
      .then(function (response) {
        console.log("‚úÖ Email enviado exitosamente:", response);
        console.log("üìä Status:", response.status);
        console.log("üìù Text:", response.text);
        
        mostrarMensaje("üéâ ¬°Perfecto! Te hemos enviado un correo de bienvenida. Revisa tu bandeja de entrada.", "exito");
        form.reset();
        
        // Opcional: Guardar en localStorage que el usuario se suscribi√≥
        localStorage.setItem('suscrito', 'true');
        localStorage.setItem('emailSuscrito', emailUsuario);
      })
      .catch(function (error) {
        console.error("‚ùå ERROR COMPLETO:", error);
        console.error("üìä Status del error:", error.status);
        console.error("üìù Mensaje del error:", error.text);
        console.error("üîç Tipo de error:", typeof error);
        console.error("üóÇÔ∏è Todas las propiedades del error:", Object.keys(error));
        
        // Mostrar TODOS los detalles del error
        console.log("=== DEBUGGING COMPLETO ===");
        console.log("Error object:", JSON.stringify(error, null, 2));
        
        let mensajeError = "‚ùå Error al enviar el correo. ";
        let detalleError = "";
        
        if (error.status) {
          switch(error.status) {
            case 0:
              mensajeError += "Problema de conexi√≥n a internet.";
              detalleError = "No se pudo conectar con los servidores de EmailJS";
              break;
            case 400:
              mensajeError += "Error en la configuraci√≥n del service o template.";
              detalleError = "Verifica que el Service ID y Template ID sean correctos";
              break;
            case 403:
              mensajeError += "Error de autorizaci√≥n.";
              detalleError = "Verifica tu Public Key o que el service est√© conectado";
              break;
            case 422:
              mensajeError += "Datos enviados inv√°lidos.";
              detalleError = "Verifica el formato del email o los par√°metros del template";
              break;
            default:
              mensajeError += `Error ${error.status}: ${error.text || 'Error desconocido'}`;
              detalleError = "Error no identificado";
          }
        } else {
          mensajeError += "Error de red o configuraci√≥n.";
          detalleError = "Posible problema de CORS o conectividad";
        }
        
        console.error("üí° Detalle del error:", detalleError);
        mostrarMensaje(mensajeError, "error");
        
        // Mostrar alert con m√°s detalles para debugging
        alert(`DEBUG INFO:\nStatus: ${error.status || 'undefined'}\nMessage: ${error.text || error.message || 'No message'}\nType: ${typeof error}\n\nRevisa la consola (F12) para m√°s detalles.`);
      })
      .finally(function() {
        // Restaurar estado del bot√≥n
        btnSuscribir.disabled = false;
        btnSuscribir.textContent = "Suscribirme";
      });
  });

  // Validaci√≥n en tiempo real
  inputCorreo.addEventListener("input", function() {
    const email = this.value.trim();
    
    if (email && validateEmail(email)) {
      this.style.borderColor = "#28a745";
    } else if (email) {
      this.style.borderColor = "#dc3545";
    } else {
      this.style.borderColor = "#e1e5e9";
    }
  });

  console.log("üì± Formulario de suscripci√≥n cargado correctamente");
});
